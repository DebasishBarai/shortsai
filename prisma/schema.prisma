generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionType {
  free
  basic
  premium
}

enum ContentType {
  customPrompt
  randomAiStory
  scaryStay
  historicalFacts
  bedTimeStory
  motivational
  funFacts
}

enum VideoStyle {
  realistic
  cartoon
  watercolor
  sketch
}

enum VideoDuration {
  DURATION_15 @map("15 sec")
  DURATION_30 @map("30 sec")
  DURATION_60 @map("60 sec")
}

enum VoiceType {
  Joanna
  Salli
  Kimberly
  Kendra
  Ivy
  Matthew
  Justin
  Joey
}

enum AspectRatio {
  RATIO_9_16 @map("9:16")
  RATIO_16_9 @map("16:9")
  RATIO_4_3  @map("4:3")
  RATIO_3_4  @map("3:4")
  RATIO_1_1  @map("1:1")
}

// Better Auth expects these exact table structures
model User {
  id              String   @id @default(cuid())
  name            String?
  email           String   @unique
  emailVerified   Boolean  @default(false)
  image           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // Your custom fields
  hashedPassword  String?
  isVerified      Boolean  @default(false)
  verifyToken     String?  @unique
  credits         Int      @default(5)
  polarCustomerId String?  @unique

  accounts Account[]
  sessions Session[]
  videos   Video[]

  @@map("user")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String // Better Auth requires this field
  userId                String
  providerId            String // Better Auth uses providerId, not provider
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String? // For credential accounts
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

model Video {
  id          String         @id @default(cuid())
  url         String?
  title       String?
  description String?
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentType ContentType?   @default(historicalFacts)
  prompt      String?        @db.Text
  style       VideoStyle?    @default(realistic)
  voiceType   VoiceType?     @default(Joanna)
  aspectRatio AspectRatio?   @default(RATIO_9_16)
  duration    VideoDuration? @default(DURATION_60)
  frames      Json?
  audioUrl    String?
  imagesUrl   String[]
  script      String?
  caption     Json?
  error       Boolean        @default(false)
  completed   Boolean        @default(false)
  renderId    String?
  bucketName  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}
